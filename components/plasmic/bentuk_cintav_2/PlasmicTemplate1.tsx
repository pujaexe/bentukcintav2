// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 62fk78rY9xoShC3bnaKgA9
// Component: tCLmdV1-a5

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import YouTube from "@plasmicpkgs/react-youtube"; // plasmic-import: CHO21V9uYw/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent
import { Iframe } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: CMDBvOhaI4s/codeComponent
import Button from "../../Button"; // plasmic-import: 02HmyteR4qq/component
import WhatsappButton from "../../WhatsappButton"; // plasmic-import: -w4zVRfnGC/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal"; // plasmic-import: xx93QbkHH5i/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: lP7-syqRi0Vod/codeComponent

import { useScreenVariants as useScreenVariants_7YtAkblAUxFb } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 7Yt-akblAUxFb/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_bentuk_cintav_2.module.css"; // plasmic-import: 62fk78rY9xoShC3bnaKgA9/projectcss
import sty from "./PlasmicTemplate1.module.css"; // plasmic-import: tCLmdV1-a5/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 2oSyQCFheDJ/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: XBieVn7nEqJ/icon
import WhatsappSvgrepoComsvgIcon from "./icons/PlasmicIcon__WhatsappSvgrepoComsvg"; // plasmic-import: 8wYuQ9ltP1/icon
import CloseCircleSvgrepoComsvgIcon from "./icons/PlasmicIcon__CloseCircleSvgrepoComsvg"; // plasmic-import: LT2cH1PbKL/icon
import WashingHandsSvgrepoComsvgIcon from "./icons/PlasmicIcon__WashingHandsSvgrepoComsvg"; // plasmic-import: cM9KKnXrjB/icon
import Mask2SvgrepoComsvgIcon from "./icons/PlasmicIcon__Mask2SvgrepoComsvg"; // plasmic-import: ioPnHlLgy4/icon
import SocialDistancingSvgrepoComsvgIcon from "./icons/PlasmicIcon__SocialDistancingSvgrepoComsvg"; // plasmic-import: DcuxjPu_O-/icon

export type PlasmicTemplate1__VariantMembers = {};
export type PlasmicTemplate1__VariantsArgs = {};
type VariantPropType = keyof PlasmicTemplate1__VariantsArgs;
export const PlasmicTemplate1__VariantProps = new Array<VariantPropType>();

export type PlasmicTemplate1__ArgsType = {
  previewPopup?: boolean;
  onPreviewPopupChange?: (val: boolean) => void;
  clickedImgUrl?: string;
  onClickedImgUrlChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicTemplate1__ArgsType;
export const PlasmicTemplate1__ArgProps = new Array<ArgPropType>(
  "previewPopup",
  "onPreviewPopupChange",
  "clickedImgUrl",
  "onClickedImgUrlChange"
);

export type PlasmicTemplate1__OverridesType = {
  root?: p.Flex<"div">;
  hero?: p.Flex<"div">;
  desc?: p.Flex<"div">;
  details?: p.Flex<"div">;
  contentWrapper?: p.Flex<"div">;
  title?: p.Flex<"div">;
  pengantinDetails?: p.Flex<"div">;
  man?: p.Flex<"div">;
  girl?: p.Flex<"div">;
  dateTime?: p.Flex<"div">;
  gallery?: p.Flex<"div">;
  contentWrapper2?: p.Flex<"div">;
  title2?: p.Flex<"div">;
  youTube?: p.Flex<typeof YouTube>;
  embedHtml?: p.Flex<typeof Embed>;
  map?: p.Flex<"div">;
  contentWrapper3?: p.Flex<"div">;
  title3?: p.Flex<"div">;
  iframe?: p.Flex<typeof Iframe>;
  footer?: p.Flex<"div">;
  whatsappButton?: p.Flex<typeof WhatsappButton>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  modal?: p.Flex<typeof AntdModal>;
  part1?: p.Flex<"div">;
  part12?: p.Flex<"div">;
  part13?: p.Flex<"div">;
};

export interface DefaultTemplate1Props {
  previewPopup?: boolean;
  onPreviewPopupChange?: (val: boolean) => void;
  clickedImgUrl?: string;
  onClickedImgUrlChange?: (val: string) => void;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTemplate1__RenderFunc(props: {
  variants: PlasmicTemplate1__VariantsArgs;
  args: PlasmicTemplate1__ArgsType;
  overrides: PlasmicTemplate1__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "previewPopup",
        type: "writable",
        variableType: "boolean",

        valueProp: "previewPopup",
        onChangeProp: "onPreviewPopupChange"
      },
      {
        path: "clickedImgUrl",
        type: "writable",
        variableType: "text",

        valueProp: "clickedImgUrl",
        onChangeProp: "onClickedImgUrlChange"
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_7YtAkblAUxFb()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"hero"}
        data-plasmic-override={overrides.hero}
        className={classNames(projectcss.all, sty.hero)}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__npNu)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? ("100%" as const)
              : ("100%" as const)
          }
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? ("100%" as const)
              : ("100%" as const)
          }
          loading={"lazy" as const}
          src={(() => {
            try {
              return $ctx.graphCmsItem.coverPhoto;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "https://site-assets.plasmic.app/fc2d188e3a462afa31d6e98b82d753ee.png";
              }
              throw e;
            }
          })()}
        />

        <p.Stack
          as={"div"}
          data-plasmic-name={"desc"}
          data-plasmic-override={overrides.desc}
          hasGap={true}
          className={classNames(projectcss.all, sty.desc)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___2QRog
            )}
          >
            {"UNDANGAN PERNIKAHAN"}
          </div>
          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__hvAn2
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $ctx.graphCmsItem.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Jonh & Merry";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h2>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__gTfAi
            )}
          >
            {
              "WE INVITE YOU TO CELEBRATE\nWITH US THE MOST SPECIAL DAY IN OUR LIFES"
            }
          </div>
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rimOu)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7GO4I
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 1
                        ? "Jan"
                        : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 2
                        ? "Feb"
                        : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 3
                        ? "Mar"
                        : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 4
                        ? "Apr"
                        : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 5
                        ? "May"
                        : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 6
                        ? "Jun"
                        : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 7
                        ? "Jul"
                        : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 8
                        ? "Aug"
                        : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 9
                        ? "Sep"
                        : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 10
                        ? "Oct"
                        : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 11
                        ? "Nov"
                        : "Dec";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Jan";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <h5
                className={classNames(
                  projectcss.all,
                  projectcss.h5,
                  projectcss.__wab_text,
                  sty.h5__x0Wdx
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.graphCmsItem.evenDateTime.slice(8, 10);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "30";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </h5>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9DlI
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.graphCmsItem.evenDateTime.slice(0, 4);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "2023";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </p.Stack>
          ) : null}
        </p.Stack>
      </div>
      <div
        data-plasmic-name={"details"}
        data-plasmic-override={overrides.details}
        className={classNames(projectcss.all, sty.details)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"contentWrapper"}
          data-plasmic-override={overrides.contentWrapper}
          hasGap={true}
          className={classNames(projectcss.all, sty.contentWrapper)}
        >
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              hasGap={true}
              className={classNames(projectcss.all, sty.title)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2___7HOv3
                )}
              >
                {"Om Swastiastu"}
              </h2>
              <h5
                className={classNames(
                  projectcss.all,
                  projectcss.h5,
                  projectcss.__wab_text,
                  sty.h5__myBc
                )}
              >
                {"Mohon Doa Restu"}
              </h5>
            </p.Stack>
          ) : null}
          <p.Stack
            as={"div"}
            data-plasmic-name={"pengantinDetails"}
            data-plasmic-override={overrides.pengantinDetails}
            hasGap={true}
            className={classNames(projectcss.all, sty.pengantinDetails)}
          >
            <div className={classNames(projectcss.all, sty.column__ts6Hw)}>
              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"man"}
                  data-plasmic-override={overrides.man}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.man)}
                >
                  {(() => {
                    try {
                      return $ctx.graphCmsItem.photoPria != null;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__sWvM)}
                      displayHeight={"200px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"200px" as const}
                      loading={"lazy" as const}
                      src={(() => {
                        try {
                          return $ctx.graphCmsItem.photoPria;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  ) : null}
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__pma8M
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.graphCmsItem.pengantinPria;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Jonh Doe";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h3>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zwau0
                    )}
                  >
                    {"Putra dari pasangan"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qcXWn
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $ctx.graphCmsItem.bapakPria +
                            " & " +
                            $ctx.graphCmsItem.ibuPria
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Rocky Doe & Jane Doe";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vIDjS
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.graphCmsItem.alamatPria;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "This is Bride Hometown Addess";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </p.Stack>
              ) : null}
            </div>
            <div className={classNames(projectcss.all, sty.column__jwVtf)}>
              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"girl"}
                  data-plasmic-override={overrides.girl}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.girl)}
                >
                  {(() => {
                    try {
                      return $ctx.graphCmsItem.photoWanita != null;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__gmLag)}
                      displayHeight={"200px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"200px" as const}
                      loading={"lazy" as const}
                      src={(() => {
                        try {
                          return $ctx.graphCmsItem.photoWanita;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  ) : null}
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__ntRkW
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.graphCmsItem.pengantinWanita;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Merry Doe";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h3>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6Ge1A
                    )}
                  >
                    {"Putra dari pasangan"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eSa1I
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $ctx.graphCmsItem.bapakWanita +
                            " & " +
                            $ctx.graphCmsItem.ibuWanita
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Rocky Doe & Jane Doe";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lgEg
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.graphCmsItem.alamatWanita;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "This is Bride Hometown Addess";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </p.Stack>
              ) : null}
            </div>
          </p.Stack>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rLnUc
            )}
          >
            {
              "Atas Asung Kertha Wara Nugraha Ida Sang Hyang Widhi Wasa/Tuhan Yang Maha Esa kami bermaksud mengundang Bapak/Ibu/Saudara/i pada Upacara Manusa Yadnya Pawiwahan (Pernikahan) Putra dan Putri kami"
            }
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__reQJ
            )}
          >
            {
              "Merupakan suatu kehormatan dan kebahagiaan bagi kami, apabila Bapak / Ibu / Saudara / i berkenan hadir untuk memberikan doa restu, pada:"
            }
          </div>
          <p.Stack
            as={"div"}
            data-plasmic-name={"dateTime"}
            data-plasmic-override={overrides.dateTime}
            hasGap={true}
            className={classNames(projectcss.all, sty.dateTime)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__unMst)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__e1Hx
                )}
              >
                {"Hari / Tanggal"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__knoTq
                )}
              >
                {"Pukul"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qaE7V
                )}
              >
                {"Alamat"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__kCCpB)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__akVo
                )}
              >
                {":"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6TiB
                )}
              >
                {":"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vh1NB
                )}
              >
                {":"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__eeqo)}>
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__goIso)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__v43M
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.graphCmsItem.evenDateTime.slice(8, 10);
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "30";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1Uwvc
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 1
                            ? "Jan"
                            : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 2
                            ? "Feb"
                            : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 3
                            ? "Mar"
                            : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 4
                            ? "Apr"
                            : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 5
                            ? "May"
                            : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 6
                            ? "Jun"
                            : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 7
                            ? "Jul"
                            : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 8
                            ? "Aug"
                            : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 9
                            ? "Sep"
                            : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 10
                            ? "Oct"
                            : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 11
                            ? "Nov"
                            : "Dec";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Jan";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__o5G5X
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.graphCmsItem.evenDateTime.slice(0, 4);
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "2023";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </p.Stack>
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jrrhv
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (
                        $ctx.graphCmsItem.evenDateTime.slice(11, 16) +
                        " s/d Selesai"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "05:00 s/d Selesai";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cspIp
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.graphCmsItem.eventLocation;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Event Address Location is Here";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          </p.Stack>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__fRqxL
            )}
          >
            {
              "Atas Kehadiran serta doa dan restu Bapak / Ibu / Saudara / i, kami ucapkan terima kasih"
            }
          </div>
          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__mYmb1
            )}
          >
            {"Om Shanti Shanti Shanti Om"}
          </h2>
        </p.Stack>
      </div>
      <div
        data-plasmic-name={"gallery"}
        data-plasmic-override={overrides.gallery}
        className={classNames(projectcss.all, sty.gallery)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"contentWrapper2"}
          data-plasmic-override={overrides.contentWrapper2}
          hasGap={true}
          className={classNames(projectcss.all, sty.contentWrapper2)}
        >
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"title2"}
              data-plasmic-override={overrides.title2}
              hasGap={true}
              className={classNames(projectcss.all, sty.title2)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__r66H0
                )}
              >
                {"Gallery"}
              </h2>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yArAe
                )}
              >
                {
                  '"Ya Tuhanku yang Maha Pengasih, anugerahkanlah kepada pasangan pengantin ini senantiasa berbahagia keduanya tiada terpisahkan, panjang umur, semoga pengantin ini dianugerahkan putra dan cucu yang memberikan penghiburan, tinggal dirumah yang penuh kebahagiaan.”'
                }
              </div>
            </p.Stack>
          ) : null}
          {(() => {
            try {
              return $ctx.graphCmsItem.youtubeUrl != null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <YouTube
              data-plasmic-name={"youTube"}
              data-plasmic-override={overrides.youTube}
              className={classNames("__wab_instance", sty.youTube)}
              videoId={(() => {
                try {
                  return $ctx.graphCmsItem.youtubeUrl;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "R6MeLqRQzYw";
                  }
                  throw e;
                }
              })()}
            />
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__oFuCq)}>
            {(
              (() => {
                try {
                  return $ctx.graphCmsItem.galleries;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })() ?? []
            ).map((currentItem, currentIndex) => (
              <div
                className={classNames(projectcss.all, sty.freeBox___2E5Gb)}
                key={currentIndex}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__rYhH)}
                  displayHeight={"300px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"300px" as const}
                  loading={"lazy" as const}
                  onClick={async event => {
                    const $steps = {};
                    $steps["updatePreviewPopup"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "kpWSlddWS",
                                componentUuid: "tCLmdV1-a5",
                                argName: "variable"
                              },
                              () => ({
                                objRoot: $state,
                                variablePath: ["previewPopup"]
                              })
                            ),
                            operation: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "kpWSlddWS",
                                componentUuid: "tCLmdV1-a5",
                                argName: "operation"
                              },
                              () => 4
                            )
                          };
                          return __wrapUserFunction(
                            {
                              type: "InteractionLoc",
                              actionName: "updateVariable",
                              interactionUuid: "kpWSlddWS",
                              componentUuid: "tCLmdV1-a5"
                            },
                            () =>
                              (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = p.get(objRoot, variablePath);
                                p.set(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]),
                            actionArgs
                          );
                        })()
                      : undefined;
                    if (
                      typeof $steps["updatePreviewPopup"] === "object" &&
                      typeof $steps["updatePreviewPopup"].then === "function"
                    ) {
                      $steps["updatePreviewPopup"] = await __wrapUserPromise(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariable",
                          interactionUuid: "kpWSlddWS",
                          componentUuid: "tCLmdV1-a5"
                        },
                        $steps["updatePreviewPopup"]
                      );
                    }
                    $steps["updateClickedImgUrl"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "0D-Nx3YxB",
                                componentUuid: "tCLmdV1-a5",
                                argName: "variable"
                              },
                              () => ({
                                objRoot: $state,
                                variablePath: ["clickedImgUrl"]
                              })
                            ),
                            operation: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "0D-Nx3YxB",
                                componentUuid: "tCLmdV1-a5",
                                argName: "operation"
                              },
                              () => 0
                            ),
                            value: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "0D-Nx3YxB",
                                componentUuid: "tCLmdV1-a5",
                                argName: "value"
                              },
                              () => currentItem.photoGallery
                            )
                          };
                          return __wrapUserFunction(
                            {
                              type: "InteractionLoc",
                              actionName: "updateVariable",
                              interactionUuid: "0D-Nx3YxB",
                              componentUuid: "tCLmdV1-a5"
                            },
                            () =>
                              (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                p.set(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]),
                            actionArgs
                          );
                        })()
                      : undefined;
                    if (
                      typeof $steps["updateClickedImgUrl"] === "object" &&
                      typeof $steps["updateClickedImgUrl"].then === "function"
                    ) {
                      $steps["updateClickedImgUrl"] = await __wrapUserPromise(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariable",
                          interactionUuid: "0D-Nx3YxB",
                          componentUuid: "tCLmdV1-a5"
                        },
                        $steps["updateClickedImgUrl"]
                      );
                    }
                  }}
                  src={(() => {
                    try {
                      return currentItem.photoGallery;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "https://via.placeholder.com/150";
                      }
                      throw e;
                    }
                  })()}
                />
              </div>
            ))}
          </div>
          {(() => {
            try {
              return $ctx.graphCmsItem.audioUrl != null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Embed
              data-plasmic-name={"embedHtml"}
              data-plasmic-override={overrides.embedHtml}
              className={classNames("__wab_instance", sty.embedHtml)}
              code={(() => {
                try {
                  return (
                    '<audio controls autoplay> <source src="' +
                    $ctx.graphCmsItem.audioUrl +
                    "\" type='audio/mpeg'></audio>"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "<div>Audio Player</div>";
                  }
                  throw e;
                }
              })()}
            />
          ) : null}
        </p.Stack>
      </div>
      <div
        data-plasmic-name={"map"}
        data-plasmic-override={overrides.map}
        className={classNames(projectcss.all, sty.map)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"contentWrapper3"}
          data-plasmic-override={overrides.contentWrapper3}
          hasGap={true}
          className={classNames(projectcss.all, sty.contentWrapper3)}
        >
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"title3"}
              data-plasmic-override={overrides.title3}
              hasGap={true}
              className={classNames(projectcss.all, sty.title3)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__zlNQv
                )}
              >
                {"Location"}
              </h2>
            </p.Stack>
          ) : null}
          <Iframe
            data-plasmic-name={"iframe"}
            data-plasmic-override={overrides.iframe}
            className={classNames("__wab_instance", sty.iframe)}
            preview={true}
            src={(() => {
              try {
                return $ctx.graphCmsItem.gmapsEmbed;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "https://www.example.com";
                }
                throw e;
              }
            })()}
          />

          <div className={classNames(projectcss.all, sty.freeBox__iloPk)}>
            <Button
              className={classNames("__wab_instance", sty.button__ghDH)}
              color={"yellow" as const}
              link={(() => {
                try {
                  return (
                    "https://www.google.com/maps/place/" +
                    $ctx.graphCmsItem.eventMap.latitude +
                    "," +
                    $ctx.graphCmsItem.eventMap.longitude
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              {"Petunjuk Arah"}
            </Button>
          </div>
        </p.Stack>
      </div>
      <div
        data-plasmic-name={"footer"}
        data-plasmic-override={overrides.footer}
        className={classNames(projectcss.all, sty.footer)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__iufQg
          )}
        >
          {"Build with 💖 by Bentukcinta.com"}
        </div>
      </div>
      <WhatsappButton
        data-plasmic-name={"whatsappButton"}
        data-plasmic-override={overrides.whatsappButton}
        className={classNames("__wab_instance", sty.whatsappButton)}
        whatsapp2={
          <p.PlasmicLink
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.all, projectcss.a, sty.link)}
            component={Link}
            href={(() => {
              try {
                return (
                  "https://api.whatsapp.com/send?phone=" +
                  $ctx.graphCmsItem.phone1 +
                  "%20&text=Hi,%20ini%20pesan%20dari%20undangan%20online%20mu."
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            platform={"nextjs"}
          >
            <WhatsappSvgrepoComsvgIcon
              className={classNames(projectcss.all, sty.svg__dkJa0)}
              role={"img"}
            />
          </p.PlasmicLink>
        }
      />

      {(() => {
        try {
          return $state.previewPopup;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___0C8T9)}
          onClick={async event => {
            const $steps = {};
            $steps["updatePreviewPopup"] = true
              ? (() => {
                  const actionArgs = {
                    variable: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "bpP0WZxxr",
                        componentUuid: "tCLmdV1-a5",
                        argName: "variable"
                      },
                      () => ({
                        objRoot: $state,
                        variablePath: ["previewPopup"]
                      })
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "bpP0WZxxr",
                        componentUuid: "tCLmdV1-a5",
                        argName: "operation"
                      },
                      () => 4
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "bpP0WZxxr",
                      componentUuid: "tCLmdV1-a5"
                    },
                    () =>
                      (({ variable, value, startIndex, deleteCount }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = p.get(objRoot, variablePath);
                        p.set(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
            if (
              typeof $steps["updatePreviewPopup"] === "object" &&
              typeof $steps["updatePreviewPopup"].then === "function"
            ) {
              $steps["updatePreviewPopup"] = await __wrapUserPromise(
                {
                  type: "InteractionLoc",
                  actionName: "updateVariable",
                  interactionUuid: "bpP0WZxxr",
                  componentUuid: "tCLmdV1-a5"
                },
                $steps["updatePreviewPopup"]
              );
            }
          }}
        >
          <CloseCircleSvgrepoComsvgIcon
            className={classNames(projectcss.all, sty.svg__iKwfz)}
            onClick={async event => {
              const $steps = {};
              $steps["updatePreviewPopup"] = true
                ? (() => {
                    const actionArgs = {
                      variable: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "updateVariable",
                          interactionUuid: "YbAm5jRcS",
                          componentUuid: "tCLmdV1-a5",
                          argName: "variable"
                        },
                        () => ({
                          objRoot: $state,
                          variablePath: ["previewPopup"]
                        })
                      ),
                      operation: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "updateVariable",
                          interactionUuid: "YbAm5jRcS",
                          componentUuid: "tCLmdV1-a5",
                          argName: "operation"
                        },
                        () => 4
                      )
                    };
                    return __wrapUserFunction(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariable",
                        interactionUuid: "YbAm5jRcS",
                        componentUuid: "tCLmdV1-a5"
                      },
                      () =>
                        (({ variable, value, startIndex, deleteCount }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = p.get(objRoot, variablePath);
                          p.set(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]),
                      actionArgs
                    );
                  })()
                : undefined;
              if (
                typeof $steps["updatePreviewPopup"] === "object" &&
                typeof $steps["updatePreviewPopup"].then === "function"
              ) {
                $steps["updatePreviewPopup"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "updateVariable",
                    interactionUuid: "YbAm5jRcS",
                    componentUuid: "tCLmdV1-a5"
                  },
                  $steps["updatePreviewPopup"]
                );
              }
            }}
            role={"img"}
          />

          {(() => {
            try {
              return true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img___36Fd)}
              displayHeight={"auto" as const}
              displayMaxHeight={"100%" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={(() => {
                try {
                  return $state.clickedImgUrl;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          ) : null}
        </div>
      ) : null}
      <AntdModal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        className={classNames("__wab_instance", sty.modal)}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens
        )}
        footer={
          true ? (
            <div className={classNames(projectcss.all, sty.freeBox___9E00C)}>
              <Button
                className={classNames("__wab_instance", sty.button__hKqE)}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariable",
                              interactionUuid: "KJWrgGX1s",
                              componentUuid: "tCLmdV1-a5",
                              argName: "variable"
                            },
                            () => ({
                              objRoot: $state,
                              variablePath: ["modal", "open"]
                            })
                          ),
                          operation: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariable",
                              interactionUuid: "KJWrgGX1s",
                              componentUuid: "tCLmdV1-a5",
                              argName: "operation"
                            },
                            () => 4
                          )
                        };
                        return __wrapUserFunction(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariable",
                            interactionUuid: "KJWrgGX1s",
                            componentUuid: "tCLmdV1-a5"
                          },
                          () =>
                            (({ variable, value, startIndex, deleteCount }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = p.get(objRoot, variablePath);
                              p.set(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]),
                          actionArgs
                        );
                      })()
                    : undefined;
                  if (
                    typeof $steps["updateModalOpen"] === "object" &&
                    typeof $steps["updateModalOpen"].then === "function"
                  ) {
                    $steps["updateModalOpen"] = await __wrapUserPromise(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariable",
                        interactionUuid: "KJWrgGX1s",
                        componentUuid: "tCLmdV1-a5"
                      },
                      $steps["updateModalOpen"]
                    );
                  }
                }}
              >
                {"Buka Undangan"}
              </Button>
            </div>
          ) : null
        }
        modalScopeClassName={sty["modal__modal"]}
        onOpenChange={p.generateStateOnChangeProp($state, ["modal", "open"])}
        open={p.generateStateValueProp($state, ["modal", "open"])}
        title={
          <React.Fragment>
            {(() => {
              try {
                return $ctx.graphCmsItem.title;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Jonh & Merry";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        }
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__ckUmp)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zmVXz
            )}
          >
            {
              "Tanpa mengurangi rasa hormat, dikarenakan situasi yang sedang terjadi ditengah Pandemi Covid-19 ini kami memohon maaf karena acara akan diselenggarakan sesuai peraturan dan himbauan pemerintah."
            }
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__nYxRe)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"part1"}
              data-plasmic-override={overrides.part1}
              hasGap={true}
              className={classNames(projectcss.all, sty.part1)}
            >
              <WashingHandsSvgrepoComsvgIcon
                className={classNames(projectcss.all, sty.svg__oghhY)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gVs4B
                )}
              >
                {"Membersihkan Tangan"}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"part12"}
              data-plasmic-override={overrides.part12}
              hasGap={true}
              className={classNames(projectcss.all, sty.part12)}
            >
              <Mask2SvgrepoComsvgIcon
                className={classNames(projectcss.all, sty.svg__s5FDk)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eGtAr
                )}
              >
                {"Memakai Masker"}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"part13"}
              data-plasmic-override={overrides.part13}
              hasGap={true}
              className={classNames(projectcss.all, sty.part13)}
            >
              <SocialDistancingSvgrepoComsvgIcon
                className={classNames(projectcss.all, sty.svg__cLhqY)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8IySs
                )}
              >
                {"Menjaga Jarak"}
              </div>
            </p.Stack>
          </div>
        </p.Stack>
      </AntdModal>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hero",
    "desc",
    "details",
    "contentWrapper",
    "title",
    "pengantinDetails",
    "man",
    "girl",
    "dateTime",
    "gallery",
    "contentWrapper2",
    "title2",
    "youTube",
    "embedHtml",
    "map",
    "contentWrapper3",
    "title3",
    "iframe",
    "footer",
    "whatsappButton",
    "link",
    "modal",
    "part1",
    "part12",
    "part13"
  ],
  hero: ["hero", "desc"],
  desc: ["desc"],
  details: [
    "details",
    "contentWrapper",
    "title",
    "pengantinDetails",
    "man",
    "girl",
    "dateTime"
  ],
  contentWrapper: [
    "contentWrapper",
    "title",
    "pengantinDetails",
    "man",
    "girl",
    "dateTime"
  ],
  title: ["title"],
  pengantinDetails: ["pengantinDetails", "man", "girl"],
  man: ["man"],
  girl: ["girl"],
  dateTime: ["dateTime"],
  gallery: ["gallery", "contentWrapper2", "title2", "youTube", "embedHtml"],
  contentWrapper2: ["contentWrapper2", "title2", "youTube", "embedHtml"],
  title2: ["title2"],
  youTube: ["youTube"],
  embedHtml: ["embedHtml"],
  map: ["map", "contentWrapper3", "title3", "iframe"],
  contentWrapper3: ["contentWrapper3", "title3", "iframe"],
  title3: ["title3"],
  iframe: ["iframe"],
  footer: ["footer"],
  whatsappButton: ["whatsappButton", "link"],
  link: ["link"],
  modal: ["modal", "part1", "part12", "part13"],
  part1: ["part1"],
  part12: ["part12"],
  part13: ["part13"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  hero: "div";
  desc: "div";
  details: "div";
  contentWrapper: "div";
  title: "div";
  pengantinDetails: "div";
  man: "div";
  girl: "div";
  dateTime: "div";
  gallery: "div";
  contentWrapper2: "div";
  title2: "div";
  youTube: typeof YouTube;
  embedHtml: typeof Embed;
  map: "div";
  contentWrapper3: "div";
  title3: "div";
  iframe: typeof Iframe;
  footer: "div";
  whatsappButton: typeof WhatsappButton;
  link: "a";
  modal: typeof AntdModal;
  part1: "div";
  part12: "div";
  part13: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTemplate1__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTemplate1__VariantsArgs;
    args?: PlasmicTemplate1__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTemplate1__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTemplate1__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTemplate1__ArgProps,
          internalVariantPropNames: PlasmicTemplate1__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTemplate1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTemplate1";
  } else {
    func.displayName = `PlasmicTemplate1.${nodeName}`;
  }
  return func;
}

export const PlasmicTemplate1 = Object.assign(
  // Top-level PlasmicTemplate1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    desc: makeNodeComponent("desc"),
    details: makeNodeComponent("details"),
    contentWrapper: makeNodeComponent("contentWrapper"),
    title: makeNodeComponent("title"),
    pengantinDetails: makeNodeComponent("pengantinDetails"),
    man: makeNodeComponent("man"),
    girl: makeNodeComponent("girl"),
    dateTime: makeNodeComponent("dateTime"),
    gallery: makeNodeComponent("gallery"),
    contentWrapper2: makeNodeComponent("contentWrapper2"),
    title2: makeNodeComponent("title2"),
    youTube: makeNodeComponent("youTube"),
    embedHtml: makeNodeComponent("embedHtml"),
    map: makeNodeComponent("map"),
    contentWrapper3: makeNodeComponent("contentWrapper3"),
    title3: makeNodeComponent("title3"),
    iframe: makeNodeComponent("iframe"),
    footer: makeNodeComponent("footer"),
    whatsappButton: makeNodeComponent("whatsappButton"),
    link: makeNodeComponent("link"),
    modal: makeNodeComponent("modal"),
    part1: makeNodeComponent("part1"),
    part12: makeNodeComponent("part12"),
    part13: makeNodeComponent("part13"),

    // Metadata about props expected for PlasmicTemplate1
    internalVariantProps: PlasmicTemplate1__VariantProps,
    internalArgProps: PlasmicTemplate1__ArgProps
  }
);

export default PlasmicTemplate1;
/* prettier-ignore-end */
