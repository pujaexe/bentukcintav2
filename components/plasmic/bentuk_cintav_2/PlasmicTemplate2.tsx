// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 62fk78rY9xoShC3bnaKgA9
// Component: Xfvd6ITT7P8

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import YouTube from "@plasmicpkgs/react-youtube"; // plasmic-import: CHO21V9uYw/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent
import { Iframe } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: CMDBvOhaI4s/codeComponent
import Button from "../../Button"; // plasmic-import: 02HmyteR4qq/component
import WhatsappButton from "../../WhatsappButton"; // plasmic-import: -w4zVRfnGC/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal"; // plasmic-import: xx93QbkHH5i/codeComponent
import ImagePreview from "../../ImagePreview"; // plasmic-import: 01XWUA7Wd5/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: lP7-syqRi0Vod/codeComponent

import { useScreenVariants as useScreenVariants_7YtAkblAUxFb } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 7Yt-akblAUxFb/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_bentuk_cintav_2.module.css"; // plasmic-import: 62fk78rY9xoShC3bnaKgA9/projectcss
import sty from "./PlasmicTemplate2.module.css"; // plasmic-import: Xfvd6ITT7P8/css

import LocationPinSvgrepoComsvgIcon from "./icons/PlasmicIcon__LocationPinSvgrepoComsvg"; // plasmic-import: MNB752PXfu/icon
import CalendarCheckSvgrepoComsvgIcon from "./icons/PlasmicIcon__CalendarCheckSvgrepoComsvg"; // plasmic-import: -IsdiWPjUL/icon
import ClockSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__ClockSvgrepoCom1Svg"; // plasmic-import: GDHEOglvzt/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 2oSyQCFheDJ/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: XBieVn7nEqJ/icon
import WhatsappSvgrepoComsvgIcon from "./icons/PlasmicIcon__WhatsappSvgrepoComsvg"; // plasmic-import: 8wYuQ9ltP1/icon
import WashingHandsSvgrepoComsvgIcon from "./icons/PlasmicIcon__WashingHandsSvgrepoComsvg"; // plasmic-import: cM9KKnXrjB/icon
import Mask2SvgrepoComsvgIcon from "./icons/PlasmicIcon__Mask2SvgrepoComsvg"; // plasmic-import: ioPnHlLgy4/icon
import SocialDistancingSvgrepoComsvgIcon from "./icons/PlasmicIcon__SocialDistancingSvgrepoComsvg"; // plasmic-import: DcuxjPu_O-/icon
import CloseCircleSvgrepoComsvgIcon from "./icons/PlasmicIcon__CloseCircleSvgrepoComsvg"; // plasmic-import: LT2cH1PbKL/icon

export type PlasmicTemplate2__VariantMembers = {};
export type PlasmicTemplate2__VariantsArgs = {};
type VariantPropType = keyof PlasmicTemplate2__VariantsArgs;
export const PlasmicTemplate2__VariantProps = new Array<VariantPropType>();

export type PlasmicTemplate2__ArgsType = {
  previewPopup?: boolean;
  onPreviewPopupChange?: (val: boolean) => void;
  clickedImgUrl?: string;
  onClickedImgUrlChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicTemplate2__ArgsType;
export const PlasmicTemplate2__ArgProps = new Array<ArgPropType>(
  "previewPopup",
  "onPreviewPopupChange",
  "clickedImgUrl",
  "onClickedImgUrlChange"
);

export type PlasmicTemplate2__OverridesType = {
  root?: p.Flex<"div">;
  hero?: p.Flex<"div">;
  desc?: p.Flex<"div">;
  details?: p.Flex<"div">;
  contentWrapper?: p.Flex<"div">;
  title?: p.Flex<"div">;
  pengantinDetails?: p.Flex<"div">;
  man?: p.Flex<"div">;
  girl?: p.Flex<"div">;
  acaraDetails?: p.Flex<"div">;
  dateTime?: p.Flex<"div">;
  title5?: p.Flex<"div">;
  gallery?: p.Flex<"div">;
  contentWrapper2?: p.Flex<"div">;
  title2?: p.Flex<"div">;
  youTube?: p.Flex<typeof YouTube>;
  embedHtml?: p.Flex<typeof Embed>;
  map?: p.Flex<"div">;
  contentWrapper3?: p.Flex<"div">;
  title3?: p.Flex<"div">;
  iframe?: p.Flex<typeof Iframe>;
  footer?: p.Flex<"div">;
  whatsappButton?: p.Flex<typeof WhatsappButton>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  modalTemplate2?: p.Flex<typeof AntdModal>;
  part1?: p.Flex<"div">;
  part12?: p.Flex<"div">;
  part13?: p.Flex<"div">;
  imagePreview?: p.Flex<typeof ImagePreview>;
};

export interface DefaultTemplate2Props {
  previewPopup?: boolean;
  onPreviewPopupChange?: (val: boolean) => void;
  clickedImgUrl?: string;
  onClickedImgUrlChange?: (val: string) => void;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTemplate2__RenderFunc(props: {
  variants: PlasmicTemplate2__VariantsArgs;
  args: PlasmicTemplate2__ArgsType;
  overrides: PlasmicTemplate2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "previewPopup",
        type: "writable",
        variableType: "boolean",

        valueProp: "previewPopup",
        onChangeProp: "onPreviewPopupChange"
      },
      {
        path: "clickedImgUrl",
        type: "writable",
        variableType: "text",

        valueProp: "clickedImgUrl",
        onChangeProp: "onClickedImgUrlChange"
      },
      {
        path: "modalTemplate2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_7YtAkblAUxFb()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"hero"}
        data-plasmic-override={overrides.hero}
        className={classNames(projectcss.all, sty.hero)}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__oFzt)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? ("100%" as const)
              : ("100%" as const)
          }
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? ("100%" as const)
              : ("100%" as const)
          }
          loading={"lazy" as const}
          src={(() => {
            try {
              return $ctx.graphCmsItem.coverPhoto;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "https://site-assets.plasmic.app/fc2d188e3a462afa31d6e98b82d753ee.png";
              }
              throw e;
            }
          })()}
        />

        <Reveal
          className={classNames("__wab_instance", sty.reveal___3Mq4N)}
          direction={"up" as const}
          triggerOnce={true}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"desc"}
            data-plasmic-override={overrides.desc}
            hasGap={true}
            className={classNames(projectcss.all, sty.desc)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___96U6R
              )}
            >
              {"UNDANGAN PERNIKAHAN"}
            </div>
            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2__yIih
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.graphCmsItem.title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Jonh & Merry";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </h2>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jouLe
              )}
            >
              {
                "WE INVITE YOU TO CELEBRATE\nWITH US THE MOST SPECIAL DAY IN OUR LIFES"
              }
            </div>
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ckuqN)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jpapq
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 1
                          ? "Jan"
                          : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 2
                          ? "Feb"
                          : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 3
                          ? "Mar"
                          : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 4
                          ? "Apr"
                          : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 5
                          ? "May"
                          : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 6
                          ? "Jun"
                          : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 7
                          ? "Jul"
                          : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 8
                          ? "Aug"
                          : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 9
                          ? "Sep"
                          : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 10
                          ? "Oct"
                          : $ctx.graphCmsItem.evenDateTime.slice(5, 7) == 11
                          ? "Nov"
                          : "Dec";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Jan";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nd73
                  )}
                >
                  {"●"}
                </div>
                <h5
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    projectcss.__wab_text,
                    sty.h5__pn5K0
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.graphCmsItem.evenDateTime.slice(8, 10);
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "30";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h5>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iXrO
                  )}
                >
                  {"●"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aPp6A
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.graphCmsItem.evenDateTime.slice(0, 4);
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "2023";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </p.Stack>
            ) : null}
          </p.Stack>
        </Reveal>
      </div>
      <div
        data-plasmic-name={"details"}
        data-plasmic-override={overrides.details}
        className={classNames(projectcss.all, sty.details)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"contentWrapper"}
          data-plasmic-override={overrides.contentWrapper}
          hasGap={true}
          className={classNames(projectcss.all, sty.contentWrapper)}
        >
          <Reveal
            className={classNames("__wab_instance", sty.reveal__lsKd)}
            direction={"up" as const}
            triggerOnce={true}
          >
            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"title"}
                data-plasmic-override={overrides.title}
                hasGap={true}
                className={classNames(projectcss.all, sty.title)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__uba1H
                  )}
                >
                  {"Om Swastiastu"}
                </h2>
                <h5
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    projectcss.__wab_text,
                    sty.h5__zuh2
                  )}
                >
                  {"Mohon Doa Restu"}
                </h5>
              </p.Stack>
            ) : null}
          </Reveal>
          <p.Stack
            as={"div"}
            data-plasmic-name={"pengantinDetails"}
            data-plasmic-override={overrides.pengantinDetails}
            hasGap={true}
            className={classNames(projectcss.all, sty.pengantinDetails)}
          >
            <div className={classNames(projectcss.all, sty.column__hXi2G)}>
              <Reveal
                className={classNames("__wab_instance", sty.reveal__lb6Jp)}
                direction={"up" as const}
                triggerOnce={true}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"man"}
                    data-plasmic-override={overrides.man}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.man)}
                  >
                    {(() => {
                      try {
                        return $ctx.graphCmsItem.photoPria != null;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__v6Mjs)}
                        displayHeight={"200px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"200px" as const}
                        loading={"lazy" as const}
                        src={(() => {
                          try {
                            return $ctx.graphCmsItem.photoPria;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    ) : null}
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__pb
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $ctx.graphCmsItem.pengantinPria;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Jonh Doe";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </h3>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dLmUp
                      )}
                    >
                      {"Putra dari pasangan"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yspNe
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              $ctx.graphCmsItem.bapakPria +
                              " & " +
                              $ctx.graphCmsItem.ibuPria
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Rocky Doe & Jane Doe";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ouWgj
                        )}
                      >
                        <LocationPinSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg__vLvKe)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rby6J
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.graphCmsItem.alamatPria;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "This is Bride Hometown Addess";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                ) : null}
              </Reveal>
            </div>
            <div className={classNames(projectcss.all, sty.column__p094J)}>
              <Reveal
                className={classNames("__wab_instance", sty.reveal__uVwpu)}
                delay={1 as const}
                direction={"up" as const}
                triggerOnce={true}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"girl"}
                    data-plasmic-override={overrides.girl}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.girl)}
                  >
                    {(() => {
                      try {
                        return $ctx.graphCmsItem.photoWanita != null;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__fp8H)}
                        displayHeight={"200px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"200px" as const}
                        loading={"lazy" as const}
                        src={(() => {
                          try {
                            return $ctx.graphCmsItem.photoWanita;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    ) : null}
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__unxlD
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $ctx.graphCmsItem.pengantinWanita;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Merry Doe";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </h3>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__blr9T
                      )}
                    >
                      {"Putra dari pasangan"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lGNvM
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              $ctx.graphCmsItem.bapakWanita +
                              " & " +
                              $ctx.graphCmsItem.ibuWanita
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Rocky Doe & Jane Doe";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___5Oy71
                        )}
                      >
                        <LocationPinSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg__hsR2G)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6HwXb
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.graphCmsItem.alamatWanita;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "This is Bride Hometown Addess";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                ) : null}
              </Reveal>
            </div>
          </p.Stack>
          <Reveal
            className={classNames("__wab_instance", sty.reveal__puz9N)}
            direction={"up" as const}
            triggerOnce={true}
          >
            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"acaraDetails"}
                data-plasmic-override={overrides.acaraDetails}
                hasGap={true}
                className={classNames(projectcss.all, sty.acaraDetails)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__w25D)}
                  displayHeight={"102%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={(() => {
                    try {
                      return $ctx.graphCmsItem.coverPhoto;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__m2WmG)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m3Jym
                      )}
                    >
                      {
                        "Atas Asung Kertha Wara Nugraha Ida Sang Hyang Widhi Wasa/Tuhan Yang Maha Esa kami bermaksud mengundang Bapak/Ibu/Saudara/i pada Upacara Manusa Yadnya Pawiwahan (Pernikahan) Putra dan Putri kami"
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vcz9G
                      )}
                    >
                      {
                        "Merupakan suatu kehormatan dan kebahagiaan bagi kami, apabila Bapak / Ibu / Saudara / i berkenan hadir untuk memberikan doa restu, pada:"
                      }
                    </div>
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"dateTime"}
                      data-plasmic-override={overrides.dateTime}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.dateTime)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___8C1If
                        )}
                      >
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__uqwjw
                            )}
                          >
                            <CalendarCheckSvgrepoComsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__phj6A
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jYzJ
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.graphCmsItem.evenDateTime.slice(
                                      8,
                                      10
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "30";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ibjO9
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.graphCmsItem.evenDateTime.slice(
                                      5,
                                      7
                                    ) == 1
                                      ? "Jan"
                                      : $ctx.graphCmsItem.evenDateTime.slice(
                                          5,
                                          7
                                        ) == 2
                                      ? "Feb"
                                      : $ctx.graphCmsItem.evenDateTime.slice(
                                          5,
                                          7
                                        ) == 3
                                      ? "Mar"
                                      : $ctx.graphCmsItem.evenDateTime.slice(
                                          5,
                                          7
                                        ) == 4
                                      ? "Apr"
                                      : $ctx.graphCmsItem.evenDateTime.slice(
                                          5,
                                          7
                                        ) == 5
                                      ? "May"
                                      : $ctx.graphCmsItem.evenDateTime.slice(
                                          5,
                                          7
                                        ) == 6
                                      ? "Jun"
                                      : $ctx.graphCmsItem.evenDateTime.slice(
                                          5,
                                          7
                                        ) == 7
                                      ? "Jul"
                                      : $ctx.graphCmsItem.evenDateTime.slice(
                                          5,
                                          7
                                        ) == 8
                                      ? "Aug"
                                      : $ctx.graphCmsItem.evenDateTime.slice(
                                          5,
                                          7
                                        ) == 9
                                      ? "Sep"
                                      : $ctx.graphCmsItem.evenDateTime.slice(
                                          5,
                                          7
                                        ) == 10
                                      ? "Oct"
                                      : $ctx.graphCmsItem.evenDateTime.slice(
                                          5,
                                          7
                                        ) == 11
                                      ? "Nov"
                                      : "Dec";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Jan";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kfbnv
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.graphCmsItem.evenDateTime.slice(
                                      0,
                                      4
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "2023";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </p.Stack>
                        ) : null}
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__guPL
                            )}
                          >
                            <ClockSvgrepoCom1SvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__vHnFm
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xBFeo
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $ctx.graphCmsItem.evenDateTime.slice(
                                        11,
                                        16
                                      ) + " s/d Selesai"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "05:00 s/d Selesai";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </p.Stack>
                        ) : null}
                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__y8BcJ
                            )}
                          >
                            <LocationPinSvgrepoComsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__kMWgS
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3Vn4
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.graphCmsItem.eventLocation;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Event Address Location is Here";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </p.Stack>
                        ) : null}
                      </p.Stack>
                    </p.Stack>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dZqh
                      )}
                    >
                      {
                        "Atas Kehadiran serta doa dan restu Bapak / Ibu / Saudara / i, kami ucapkan terima kasih"
                      }
                    </div>
                  </p.Stack>
                ) : null}
              </p.Stack>
            ) : null}
          </Reveal>
          <Reveal
            className={classNames("__wab_instance", sty.reveal__xJTw)}
            direction={"up" as const}
            triggerOnce={true}
          >
            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"title5"}
                data-plasmic-override={overrides.title5}
                hasGap={true}
                className={classNames(projectcss.all, sty.title5)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2___8WLrt
                  )}
                >
                  {"Om Shanti Shanti Shanti Om"}
                </h2>
              </p.Stack>
            ) : null}
          </Reveal>
        </p.Stack>
      </div>
      <div
        data-plasmic-name={"gallery"}
        data-plasmic-override={overrides.gallery}
        className={classNames(projectcss.all, sty.gallery)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"contentWrapper2"}
          data-plasmic-override={overrides.contentWrapper2}
          hasGap={true}
          className={classNames(projectcss.all, sty.contentWrapper2)}
        >
          <Reveal
            className={classNames("__wab_instance", sty.reveal___8KThy)}
            triggerOnce={true}
          >
            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"title2"}
                data-plasmic-override={overrides.title2}
                hasGap={true}
                className={classNames(projectcss.all, sty.title2)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__rCt8
                  )}
                >
                  {"Gallery"}
                </h2>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wnCf
                  )}
                >
                  {
                    '"Ya Tuhanku yang Maha Pengasih, anugerahkanlah kepada pasangan pengantin ini senantiasa berbahagia keduanya tiada terpisahkan, panjang umur, semoga pengantin ini dianugerahkan putra dan cucu yang memberikan penghiburan, tinggal dirumah yang penuh kebahagiaan.”'
                  }
                </div>
              </p.Stack>
            ) : null}
          </Reveal>
          {(() => {
            try {
              return $ctx.graphCmsItem.youtubeUrl != null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <YouTube
              data-plasmic-name={"youTube"}
              data-plasmic-override={overrides.youTube}
              className={classNames("__wab_instance", sty.youTube)}
              videoId={(() => {
                try {
                  return $ctx.graphCmsItem.youtubeUrl;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "R6MeLqRQzYw";
                  }
                  throw e;
                }
              })()}
            />
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox___8O4Ov)}>
            {(
              (() => {
                try {
                  return $ctx.graphCmsItem.galleries;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })() ?? []
            ).map((currentItem, currentIndex) => (
              <div
                className={classNames(projectcss.all, sty.freeBox__yfX2R)}
                key={currentIndex}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__j4OF1)}
                  displayHeight={"300px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"300px" as const}
                  loading={"lazy" as const}
                  onClick={async event => {
                    const $steps = {};
                    $steps["updatePreviewPopup"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "9z3JAeCDcep",
                                componentUuid: "Xfvd6ITT7P8",
                                argName: "variable"
                              },
                              () => ({
                                objRoot: $state,
                                variablePath: ["previewPopup"]
                              })
                            ),
                            operation: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "9z3JAeCDcep",
                                componentUuid: "Xfvd6ITT7P8",
                                argName: "operation"
                              },
                              () => 4
                            )
                          };
                          return __wrapUserFunction(
                            {
                              type: "InteractionLoc",
                              actionName: "updateVariable",
                              interactionUuid: "9z3JAeCDcep",
                              componentUuid: "Xfvd6ITT7P8"
                            },
                            () =>
                              (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = p.get(objRoot, variablePath);
                                p.set(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]),
                            actionArgs
                          );
                        })()
                      : undefined;
                    if (
                      typeof $steps["updatePreviewPopup"] === "object" &&
                      typeof $steps["updatePreviewPopup"].then === "function"
                    ) {
                      $steps["updatePreviewPopup"] = await __wrapUserPromise(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariable",
                          interactionUuid: "9z3JAeCDcep",
                          componentUuid: "Xfvd6ITT7P8"
                        },
                        $steps["updatePreviewPopup"]
                      );
                    }
                    $steps["updateClickedImgUrl"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "lh-0NKMiSO1",
                                componentUuid: "Xfvd6ITT7P8",
                                argName: "variable"
                              },
                              () => ({
                                objRoot: $state,
                                variablePath: ["clickedImgUrl"]
                              })
                            ),
                            operation: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "lh-0NKMiSO1",
                                componentUuid: "Xfvd6ITT7P8",
                                argName: "operation"
                              },
                              () => 0
                            ),
                            value: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "lh-0NKMiSO1",
                                componentUuid: "Xfvd6ITT7P8",
                                argName: "value"
                              },
                              () => currentItem.photoGallery
                            )
                          };
                          return __wrapUserFunction(
                            {
                              type: "InteractionLoc",
                              actionName: "updateVariable",
                              interactionUuid: "lh-0NKMiSO1",
                              componentUuid: "Xfvd6ITT7P8"
                            },
                            () =>
                              (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                p.set(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]),
                            actionArgs
                          );
                        })()
                      : undefined;
                    if (
                      typeof $steps["updateClickedImgUrl"] === "object" &&
                      typeof $steps["updateClickedImgUrl"].then === "function"
                    ) {
                      $steps["updateClickedImgUrl"] = await __wrapUserPromise(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariable",
                          interactionUuid: "lh-0NKMiSO1",
                          componentUuid: "Xfvd6ITT7P8"
                        },
                        $steps["updateClickedImgUrl"]
                      );
                    }
                  }}
                  src={(() => {
                    try {
                      return currentItem.photoGallery;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "https://via.placeholder.com/150";
                      }
                      throw e;
                    }
                  })()}
                />
              </div>
            ))}
          </div>
          {(() => {
            try {
              return $ctx.graphCmsItem.audioUrl != null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Embed
              data-plasmic-name={"embedHtml"}
              data-plasmic-override={overrides.embedHtml}
              className={classNames("__wab_instance", sty.embedHtml)}
              code={(() => {
                try {
                  return (
                    '<audio controls autoplay> <source src="' +
                    $ctx.graphCmsItem.audioUrl +
                    "\" type='audio/mpeg'></audio>"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "<div>Audio Player</div>";
                  }
                  throw e;
                }
              })()}
            />
          ) : null}
        </p.Stack>
      </div>
      <div
        data-plasmic-name={"map"}
        data-plasmic-override={overrides.map}
        className={classNames(projectcss.all, sty.map)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"contentWrapper3"}
          data-plasmic-override={overrides.contentWrapper3}
          hasGap={true}
          className={classNames(projectcss.all, sty.contentWrapper3)}
        >
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"title3"}
              data-plasmic-override={overrides.title3}
              hasGap={true}
              className={classNames(projectcss.all, sty.title3)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__wzIsz
                )}
              >
                {"Location"}
              </h2>
            </p.Stack>
          ) : null}
          <Iframe
            data-plasmic-name={"iframe"}
            data-plasmic-override={overrides.iframe}
            className={classNames("__wab_instance", sty.iframe)}
            preview={true}
            src={(() => {
              try {
                return $ctx.graphCmsItem.gmapsEmbed;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "https://www.example.com";
                }
                throw e;
              }
            })()}
          />

          <div className={classNames(projectcss.all, sty.freeBox__xIsZz)}>
            <Button
              className={classNames("__wab_instance", sty.button__qpEml)}
              color={"yellow" as const}
              link={(() => {
                try {
                  return (
                    "https://www.google.com/maps/place/" +
                    $ctx.graphCmsItem.eventMap.latitude +
                    "," +
                    $ctx.graphCmsItem.eventMap.longitude
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              {"Petunjuk Arah"}
            </Button>
          </div>
        </p.Stack>
      </div>
      <div
        data-plasmic-name={"footer"}
        data-plasmic-override={overrides.footer}
        className={classNames(projectcss.all, sty.footer)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__tfksm
          )}
        >
          {"Build with 💖 by Bentukcinta.com"}
        </div>
      </div>
      <WhatsappButton
        data-plasmic-name={"whatsappButton"}
        data-plasmic-override={overrides.whatsappButton}
        className={classNames("__wab_instance", sty.whatsappButton)}
        whatsapp2={
          <p.PlasmicLink
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.all, projectcss.a, sty.link)}
            component={Link}
            href={(() => {
              try {
                return (
                  "https://api.whatsapp.com/send?phone=" +
                  $ctx.graphCmsItem.phone1 +
                  "%20&text=Hi,%20ini%20pesan%20dari%20undangan%20online%20mu."
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            platform={"nextjs"}
          >
            <WhatsappSvgrepoComsvgIcon
              className={classNames(projectcss.all, sty.svg__wroMt)}
              role={"img"}
            />
          </p.PlasmicLink>
        }
      />

      {true ? (
        <AntdModal
          data-plasmic-name={"modalTemplate2"}
          data-plasmic-override={overrides.modalTemplate2}
          className={classNames("__wab_instance", sty.modalTemplate2)}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens
          )}
          footer={
            true ? (
              <div className={classNames(projectcss.all, sty.freeBox__v01Mc)}>
                <Button
                  className={classNames("__wab_instance", sty.button__f1FU)}
                  color={"yellow" as const}
                  onClick={async event => {
                    const $steps = {};
                    $steps["updateModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "jR6gRT5AhYj",
                                componentUuid: "Xfvd6ITT7P8",
                                argName: "variable"
                              },
                              () => ({
                                objRoot: $state,
                                variablePath: ["modalTemplate2", "open"]
                              })
                            ),
                            operation: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "jR6gRT5AhYj",
                                componentUuid: "Xfvd6ITT7P8",
                                argName: "operation"
                              },
                              () => 4
                            )
                          };
                          return __wrapUserFunction(
                            {
                              type: "InteractionLoc",
                              actionName: "updateVariable",
                              interactionUuid: "jR6gRT5AhYj",
                              componentUuid: "Xfvd6ITT7P8"
                            },
                            () =>
                              (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = p.get(objRoot, variablePath);
                                p.set(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]),
                            actionArgs
                          );
                        })()
                      : undefined;
                    if (
                      typeof $steps["updateModalOpen"] === "object" &&
                      typeof $steps["updateModalOpen"].then === "function"
                    ) {
                      $steps["updateModalOpen"] = await __wrapUserPromise(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariable",
                          interactionUuid: "jR6gRT5AhYj",
                          componentUuid: "Xfvd6ITT7P8"
                        },
                        $steps["updateModalOpen"]
                      );
                    }
                  }}
                >
                  {"Buka Undangan"}
                </Button>
              </div>
            ) : null
          }
          modalScopeClassName={sty["modalTemplate2__modal"]}
          onOpenChange={p.generateStateOnChangeProp($state, [
            "modalTemplate2",
            "open"
          ])}
          open={p.generateStateValueProp($state, ["modalTemplate2", "open"])}
          title={
            <React.Fragment>
              {(() => {
                try {
                  return $ctx.graphCmsItem.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Jonh & Merry";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          }
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hjrrF)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vwJjK
              )}
            >
              {
                "Tanpa mengurangi rasa hormat, dikarenakan situasi yang sedang terjadi ditengah Pandemi Covid-19 ini kami memohon maaf karena acara akan diselenggarakan sesuai peraturan dan himbauan pemerintah."
              }
            </div>
            {true ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2U8T
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.query.to != null ? $ctx.query.to : "";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Puja";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__qe8Kr)}>
              <p.Stack
                as={"div"}
                data-plasmic-name={"part1"}
                data-plasmic-override={overrides.part1}
                hasGap={true}
                className={classNames(projectcss.all, sty.part1)}
              >
                <WashingHandsSvgrepoComsvgIcon
                  className={classNames(projectcss.all, sty.svg___2I4Uh)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9YMze
                  )}
                >
                  {"Membersihkan Tangan"}
                </div>
              </p.Stack>
              <p.Stack
                as={"div"}
                data-plasmic-name={"part12"}
                data-plasmic-override={overrides.part12}
                hasGap={true}
                className={classNames(projectcss.all, sty.part12)}
              >
                <Mask2SvgrepoComsvgIcon
                  className={classNames(projectcss.all, sty.svg__sMfl2)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aSY9
                  )}
                >
                  {"Memakai Masker"}
                </div>
              </p.Stack>
              <p.Stack
                as={"div"}
                data-plasmic-name={"part13"}
                data-plasmic-override={overrides.part13}
                hasGap={true}
                className={classNames(projectcss.all, sty.part13)}
              >
                <SocialDistancingSvgrepoComsvgIcon
                  className={classNames(projectcss.all, sty.svg__yFsRb)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__psXa6
                  )}
                >
                  {"Menjaga Jarak"}
                </div>
              </p.Stack>
            </div>
          </p.Stack>
        </AntdModal>
      ) : null}
      {(() => {
        try {
          return $state.previewPopup;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <ImagePreview
          data-plasmic-name={"imagePreview"}
          data-plasmic-override={overrides.imagePreview}
          className={classNames("__wab_instance", sty.imagePreview)}
          slot={
            <CloseCircleSvgrepoComsvgIcon
              className={classNames(projectcss.all, sty.svg__mayS2)}
              onClick={async event => {
                const $steps = {};
                $steps["updatePreviewPopup"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "REi-JwqYMsf",
                            componentUuid: "Xfvd6ITT7P8",
                            argName: "variable"
                          },
                          () => ({
                            objRoot: $state,
                            variablePath: ["previewPopup"]
                          })
                        ),
                        operation: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "REi-JwqYMsf",
                            componentUuid: "Xfvd6ITT7P8",
                            argName: "operation"
                          },
                          () => 4
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariable",
                          interactionUuid: "REi-JwqYMsf",
                          componentUuid: "Xfvd6ITT7P8"
                        },
                        () =>
                          (({ variable, value, startIndex, deleteCount }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = p.get(objRoot, variablePath);
                            p.set(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["updatePreviewPopup"] === "object" &&
                  typeof $steps["updatePreviewPopup"].then === "function"
                ) {
                  $steps["updatePreviewPopup"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "REi-JwqYMsf",
                      componentUuid: "Xfvd6ITT7P8"
                    },
                    $steps["updatePreviewPopup"]
                  );
                }
              }}
              role={"img"}
            />
          }
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__uQQk2)}
            displayHeight={"auto" as const}
            displayMaxHeight={"100%" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={(() => {
              try {
                return $state.clickedImgUrl;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        </ImagePreview>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hero",
    "desc",
    "details",
    "contentWrapper",
    "title",
    "pengantinDetails",
    "man",
    "girl",
    "acaraDetails",
    "dateTime",
    "title5",
    "gallery",
    "contentWrapper2",
    "title2",
    "youTube",
    "embedHtml",
    "map",
    "contentWrapper3",
    "title3",
    "iframe",
    "footer",
    "whatsappButton",
    "link",
    "modalTemplate2",
    "part1",
    "part12",
    "part13",
    "imagePreview"
  ],
  hero: ["hero", "desc"],
  desc: ["desc"],
  details: [
    "details",
    "contentWrapper",
    "title",
    "pengantinDetails",
    "man",
    "girl",
    "acaraDetails",
    "dateTime",
    "title5"
  ],
  contentWrapper: [
    "contentWrapper",
    "title",
    "pengantinDetails",
    "man",
    "girl",
    "acaraDetails",
    "dateTime",
    "title5"
  ],
  title: ["title"],
  pengantinDetails: ["pengantinDetails", "man", "girl"],
  man: ["man"],
  girl: ["girl"],
  acaraDetails: ["acaraDetails", "dateTime"],
  dateTime: ["dateTime"],
  title5: ["title5"],
  gallery: ["gallery", "contentWrapper2", "title2", "youTube", "embedHtml"],
  contentWrapper2: ["contentWrapper2", "title2", "youTube", "embedHtml"],
  title2: ["title2"],
  youTube: ["youTube"],
  embedHtml: ["embedHtml"],
  map: ["map", "contentWrapper3", "title3", "iframe"],
  contentWrapper3: ["contentWrapper3", "title3", "iframe"],
  title3: ["title3"],
  iframe: ["iframe"],
  footer: ["footer"],
  whatsappButton: ["whatsappButton", "link"],
  link: ["link"],
  modalTemplate2: ["modalTemplate2", "part1", "part12", "part13"],
  part1: ["part1"],
  part12: ["part12"],
  part13: ["part13"],
  imagePreview: ["imagePreview"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  hero: "div";
  desc: "div";
  details: "div";
  contentWrapper: "div";
  title: "div";
  pengantinDetails: "div";
  man: "div";
  girl: "div";
  acaraDetails: "div";
  dateTime: "div";
  title5: "div";
  gallery: "div";
  contentWrapper2: "div";
  title2: "div";
  youTube: typeof YouTube;
  embedHtml: typeof Embed;
  map: "div";
  contentWrapper3: "div";
  title3: "div";
  iframe: typeof Iframe;
  footer: "div";
  whatsappButton: typeof WhatsappButton;
  link: "a";
  modalTemplate2: typeof AntdModal;
  part1: "div";
  part12: "div";
  part13: "div";
  imagePreview: typeof ImagePreview;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTemplate2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTemplate2__VariantsArgs;
    args?: PlasmicTemplate2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTemplate2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTemplate2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTemplate2__ArgProps,
          internalVariantPropNames: PlasmicTemplate2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTemplate2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTemplate2";
  } else {
    func.displayName = `PlasmicTemplate2.${nodeName}`;
  }
  return func;
}

export const PlasmicTemplate2 = Object.assign(
  // Top-level PlasmicTemplate2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    desc: makeNodeComponent("desc"),
    details: makeNodeComponent("details"),
    contentWrapper: makeNodeComponent("contentWrapper"),
    title: makeNodeComponent("title"),
    pengantinDetails: makeNodeComponent("pengantinDetails"),
    man: makeNodeComponent("man"),
    girl: makeNodeComponent("girl"),
    acaraDetails: makeNodeComponent("acaraDetails"),
    dateTime: makeNodeComponent("dateTime"),
    title5: makeNodeComponent("title5"),
    gallery: makeNodeComponent("gallery"),
    contentWrapper2: makeNodeComponent("contentWrapper2"),
    title2: makeNodeComponent("title2"),
    youTube: makeNodeComponent("youTube"),
    embedHtml: makeNodeComponent("embedHtml"),
    map: makeNodeComponent("map"),
    contentWrapper3: makeNodeComponent("contentWrapper3"),
    title3: makeNodeComponent("title3"),
    iframe: makeNodeComponent("iframe"),
    footer: makeNodeComponent("footer"),
    whatsappButton: makeNodeComponent("whatsappButton"),
    link: makeNodeComponent("link"),
    modalTemplate2: makeNodeComponent("modalTemplate2"),
    part1: makeNodeComponent("part1"),
    part12: makeNodeComponent("part12"),
    part13: makeNodeComponent("part13"),
    imagePreview: makeNodeComponent("imagePreview"),

    // Metadata about props expected for PlasmicTemplate2
    internalVariantProps: PlasmicTemplate2__VariantProps,
    internalArgProps: PlasmicTemplate2__ArgProps
  }
);

export default PlasmicTemplate2;
/* prettier-ignore-end */
